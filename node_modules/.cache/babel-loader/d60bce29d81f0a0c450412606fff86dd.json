{"ast":null,"code":"var _jsxFileName = \"/Users/tom/SNTCH-polygon/src/components/ContractCall.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ContractCall({\n  network,\n  user,\n  fetchBalance,\n  message,\n  contract,\n  fetchContractMessage\n}) {\n  _s();\n\n  const [newMessage, setNewMessage] = useState('');\n  const [disabled, setDisabled] = useState(false);\n  const [txnHash, setTxnHash] = useState();\n  const updateBtnRef = useRef(); // Update contract `message` value on the blockchain\n\n  const updateContractMessage = async () => {\n    if (!newMessage) return;\n    disableForm();\n    const receipt = await contract.methods.update(newMessage).send({\n      from: user.publicAddress\n    });\n    setTxnHash(receipt.transactionHash);\n    enableForm();\n  }; // Disable input form while the transaction is being confirmed\n\n\n  const disableForm = () => {\n    setTxnHash(); // Clear link to previous transaction hash\n\n    setDisabled(true);\n    updateBtnRef.current.innerText = 'Submitted...';\n  }; // Re-enable input form once the transaction is confirmed\n\n\n  const enableForm = () => {\n    setDisabled(false);\n    setNewMessage('');\n    fetchBalance(user.publicAddress);\n    fetchContractMessage();\n    updateBtnRef.current.innerText = 'Update';\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Contract Message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"info\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Update Message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      disabled: disabled,\n      value: newMessage,\n      onChange: e => setNewMessage(e.target.value),\n      className: \"full-width\",\n      placeholder: \"New Message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: disabled,\n      ref: updateBtnRef,\n      onClick: updateContractMessage,\n      children: \"Update\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }, this), txnHash && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"info\",\n      children: [/*#__PURE__*/_jsxDEV(\"a\", {\n        href: network === \"ethereum\" ? `https://ropsten.etherscan.io/tx/${txnHash}` : `https://explorer-mumbai.maticvigil.com/tx/${txnHash}`,\n        target: \"_blank\",\n        children: \"View Transaction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 15\n      }, this), \" \\u2197\\uFE0F\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ContractCall, \"kqWGUx7C706IzLc5eNfJI6zIrV4=\");\n\n_c = ContractCall;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContractCall\");","map":{"version":3,"sources":["/Users/tom/SNTCH-polygon/src/components/ContractCall.js"],"names":["React","useState","useRef","ContractCall","network","user","fetchBalance","message","contract","fetchContractMessage","newMessage","setNewMessage","disabled","setDisabled","txnHash","setTxnHash","updateBtnRef","updateContractMessage","disableForm","receipt","methods","update","send","from","publicAddress","transactionHash","enableForm","current","innerText","e","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,OAAxC;;AAEA,eAAe,SAASC,YAAT,CAAsB;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,IAAX;AAAiBC,EAAAA,YAAjB;AAA+BC,EAAAA,OAA/B;AAAwCC,EAAAA,QAAxC;AAAkDC,EAAAA;AAAlD,CAAtB,EAAgG;AAAA;;AAC7G,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACa,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,EAAtC;AACA,QAAMe,YAAY,GAAGd,MAAM,EAA3B,CAJ6G,CAM7G;;AACA,QAAMe,qBAAqB,GAAG,YAAY;AACxC,QAAI,CAACP,UAAL,EAAiB;AACjBQ,IAAAA,WAAW;AACX,UAAMC,OAAO,GAAG,MAAMX,QAAQ,CAACY,OAAT,CAAiBC,MAAjB,CAAwBX,UAAxB,EAAoCY,IAApC,CAAyC;AAAEC,MAAAA,IAAI,EAAElB,IAAI,CAACmB;AAAb,KAAzC,CAAtB;AACAT,IAAAA,UAAU,CAACI,OAAO,CAACM,eAAT,CAAV;AACAC,IAAAA,UAAU;AACX,GAND,CAP6G,CAe7G;;;AACA,QAAMR,WAAW,GAAG,MAAM;AACxBH,IAAAA,UAAU,GADc,CACV;;AACdF,IAAAA,WAAW,CAAC,IAAD,CAAX;AACAG,IAAAA,YAAY,CAACW,OAAb,CAAqBC,SAArB,GAAiC,cAAjC;AACD,GAJD,CAhB6G,CAsB7G;;;AACA,QAAMF,UAAU,GAAG,MAAM;AACvBb,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAF,IAAAA,aAAa,CAAC,EAAD,CAAb;AACAL,IAAAA,YAAY,CAACD,IAAI,CAACmB,aAAN,CAAZ;AACAf,IAAAA,oBAAoB;AACpBO,IAAAA,YAAY,CAACW,OAAb,CAAqBC,SAArB,GAAiC,QAAjC;AACD,GAND;;AASA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADN,eAEM;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,gBAAuBrB;AAAvB;AAAA;AAAA;AAAA;AAAA,YAFN,eAIM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJN,eAKM;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,QAAQ,EAAEK,QAA7B;AAAuC,MAAA,KAAK,EAAEF,UAA9C;AAA0D,MAAA,QAAQ,EAAGmB,CAAD,IAAOlB,aAAa,CAACkB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAxF;AAA0G,MAAA,SAAS,EAAC,YAApH;AAAiI,MAAA,WAAW,EAAC;AAA7I;AAAA;AAAA;AAAA;AAAA,YALN,eAMM;AAAQ,MAAA,QAAQ,EAAEnB,QAAlB;AAA4B,MAAA,GAAG,EAAEI,YAAjC;AAA+C,MAAA,OAAO,EAAEC,qBAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YANN,EAQMH,OAAO,iBACL;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,8BACE;AAAG,QAAA,IAAI,EAAEV,OAAO,KAAK,UAAZ,GAA0B,mCAAkCU,OAAQ,EAApE,GAAyE,6CAA4CA,OAAQ,EAAtI;AAAyI,QAAA,MAAM,EAAC,QAAhJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAAA;AAAA;AAAA;AAAA;AAAA,YATR;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD;;GAlDuBX,Y;;KAAAA,Y","sourcesContent":["import React, { useState, useRef } from \"react\";\n\nexport default function ContractCall({ network, user, fetchBalance, message, contract, fetchContractMessage }) {\n  const [newMessage, setNewMessage] = useState('');\n  const [disabled, setDisabled] = useState(false);\n  const [txnHash, setTxnHash] = useState();\n  const updateBtnRef = useRef();\n\n  // Update contract `message` value on the blockchain\n  const updateContractMessage = async () => {\n    if (!newMessage) return;\n    disableForm();\n    const receipt = await contract.methods.update(newMessage).send({ from: user.publicAddress });\n    setTxnHash(receipt.transactionHash);\n    enableForm();\n  }\n\n  // Disable input form while the transaction is being confirmed\n  const disableForm = () => {\n    setTxnHash(); // Clear link to previous transaction hash\n    setDisabled(true);\n    updateBtnRef.current.innerText = 'Submitted...';\n  }\n\n  // Re-enable input form once the transaction is confirmed\n  const enableForm = () => {\n    setDisabled(false);\n    setNewMessage('');\n    fetchBalance(user.publicAddress);\n    fetchContractMessage()\n    updateBtnRef.current.innerText = 'Update';\n  }\n\n\n  return (\n    <div className=\"container\">\n          <h1>Contract Message</h1>\n          <div className=\"info\">{message}</div>\n\n          <h1>Update Message</h1>\n          <input type=\"text\" disabled={disabled} value={newMessage} onChange={(e) => setNewMessage(e.target.value)} className=\"full-width\" placeholder=\"New Message\" />\n          <button disabled={disabled} ref={updateBtnRef} onClick={updateContractMessage}>Update</button>\n          {\n          txnHash &&\n            <div className=\"info\">\n              <a href={network === \"ethereum\" ? `https://ropsten.etherscan.io/tx/${txnHash}` : `https://explorer-mumbai.maticvigil.com/tx/${txnHash}`} target=\"_blank\">\n                View Transaction\n              </a> ↗️\n            </div>\n          }\n        </div>\n  )\n}"]},"metadata":{},"sourceType":"module"}