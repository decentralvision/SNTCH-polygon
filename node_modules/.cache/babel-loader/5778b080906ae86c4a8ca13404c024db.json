{"ast":null,"code":"import _slicedToArray from\"/Users/tom/SNTCH-polygon/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from\"react\";import{useHistory}from\"react-router\";import{magicEthereum,magicMatic,ethWeb3,maticWeb3}from\"../magic\";import Loading from\"./Loading\";import ContractCall from\"./ContractCall\";import SendTransaction from'./SendTransaction';import Info from\"./Info\";import{abi}from'../contract/abi.js';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function Home(){var _useState=useState(magicEthereum),_useState2=_slicedToArray(_useState,2),magic=_useState2[0],setMagic=_useState2[1];var web3=magic.network===\"ethereum\"?ethWeb3:maticWeb3;var _useState3=useState(),_useState4=_slicedToArray(_useState3,2),userMetadata=_useState4[0],setUserMetadata=_useState4[1];var _useState5=useState('...'),_useState6=_slicedToArray(_useState5,2),balance=_useState6[0],setBalance=_useState6[1];var network=magic.network===\"ethereum\"?'ethereum':'matic';var ropstenContractAddress='0x3EA3913A352cDd49889c7b0dEc8Dd9491d063453';var maticContractAddress='0xfD827cC6d5b959287D7e1680dBA587ffE5dFcbB4';var contract=new web3.eth.Contract(abi,network===\"ethereum\"?ropstenContractAddress:maticContractAddress);var _useState7=useState('...'),_useState8=_slicedToArray(_useState7,2),message=_useState8[0],setMessage=_useState8[1];var history=useHistory();useEffect(function(){// On mount, we check if a user is logged in.\n// If so, we'll retrieve the authenticated user's profile, balance and contract message.\nmagic.user.isLoggedIn().then(function(magicIsLoggedIn){if(magicIsLoggedIn){magic.user.getMetadata().then(function(user){setUserMetadata(user);fetchBalance(user.publicAddress);fetchContractMessage();});}else{// If no user is logged in, redirect to `/login`\nhistory.push(\"/login\");}});},[magic]);var handleChangeNetwork=function handleChangeNetwork(e){e.target.value==='ethereum'?setMagic(magicEthereum):setMagic(magicMatic);fetchBalance(userMetadata.publicAddress);fetchContractMessage();};var fetchBalance=function fetchBalance(address){web3.eth.getBalance(address).then(function(bal){return setBalance(web3.utils.fromWei(bal));});};var fetchContractMessage=function fetchContractMessage(){return contract.methods.message().call().then(setMessage);};return userMetadata?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Info,{handleChangeNetwork:handleChangeNetwork,balance:balance,user:userMetadata,magic:magic}),/*#__PURE__*/_jsx(SendTransaction,{web3:web3,network:network,publicAddress:userMetadata.publicAddress,fetchBalance:fetchBalance}),/*#__PURE__*/_jsx(ContractCall,{network:network,contract:contract,user:userMetadata,fetchBalance:fetchBalance,message:message,fetchContractMessage:fetchContractMessage})]}):/*#__PURE__*/_jsx(Loading,{});}","map":{"version":3,"sources":["/Users/tom/SNTCH-polygon/src/components/Home.js"],"names":["React","useEffect","useState","useHistory","magicEthereum","magicMatic","ethWeb3","maticWeb3","Loading","ContractCall","SendTransaction","Info","abi","Home","magic","setMagic","web3","network","userMetadata","setUserMetadata","balance","setBalance","ropstenContractAddress","maticContractAddress","contract","eth","Contract","message","setMessage","history","user","isLoggedIn","then","magicIsLoggedIn","getMetadata","fetchBalance","publicAddress","fetchContractMessage","push","handleChangeNetwork","e","target","value","address","getBalance","bal","utils","fromWei","methods","call"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { magicEthereum, magicMatic, ethWeb3, maticWeb3 } from \"../magic\";\nimport Loading from \"./Loading\";\nimport ContractCall from \"./ContractCall\";\nimport SendTransaction from './SendTransaction';\nimport Info from \"./Info\";\nimport { abi } from '../contract/abi.js';\n\nexport default function Home() {\n  const [magic, setMagic] = useState(magicEthereum);\n  const web3 = magic.network === \"ethereum\" ? ethWeb3 : maticWeb3;\n  const [userMetadata, setUserMetadata] = useState();\n  const [balance, setBalance] = useState('...');\n  const network = magic.network === \"ethereum\" ? 'ethereum' : 'matic';\n  const ropstenContractAddress = '0x3EA3913A352cDd49889c7b0dEc8Dd9491d063453';\n  const maticContractAddress = '0xfD827cC6d5b959287D7e1680dBA587ffE5dFcbB4';\n  const contract = new web3.eth.Contract(abi, network === \"ethereum\" ? ropstenContractAddress : maticContractAddress);\n  const [message, setMessage] = useState('...');\n  const history = useHistory();\n\n  useEffect(() => {\n    // On mount, we check if a user is logged in.\n    // If so, we'll retrieve the authenticated user's profile, balance and contract message.\n    magic.user.isLoggedIn().then(magicIsLoggedIn => {\n      if (magicIsLoggedIn) {\n        magic.user.getMetadata().then(user => {\n          setUserMetadata(user);\n          fetchBalance(user.publicAddress);\n          fetchContractMessage();\n        });\n      } else {\n        // If no user is logged in, redirect to `/login`\n        history.push(\"/login\");\n      }\n    });\n  }, [magic]);\n\n   const handleChangeNetwork = (e) => {\n    e.target.value === 'ethereum' ? setMagic(magicEthereum) : setMagic(magicMatic);\n    fetchBalance(userMetadata.publicAddress);\n    fetchContractMessage();\n  }\n\n  const fetchBalance = (address) => {\n    web3.eth.getBalance(address).then(bal => setBalance(web3.utils.fromWei(bal)))\n  }\n\n  const fetchContractMessage = () => contract.methods.message().call().then(setMessage)\n\n  return (\n    userMetadata ? (\n      <>\n        <Info handleChangeNetwork={handleChangeNetwork} balance={balance} user={userMetadata} magic={magic} />\n        <SendTransaction web3={web3} network={network} publicAddress={userMetadata.publicAddress} fetchBalance={fetchBalance} />\n        <ContractCall network={network} contract={contract} user={userMetadata} fetchBalance={fetchBalance} message={message} fetchContractMessage={fetchContractMessage} />  \n      </>\n    ) : <Loading />\n  );\n}\n\n"]},"metadata":{},"sourceType":"module"}