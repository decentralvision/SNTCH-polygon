{"ast":null,"code":"var _jsxFileName = \"/Users/tom/SNTCH-polygon/src/components/Home.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { magicEthereum, magicMatic, ethWeb3, maticWeb3 } from \"../magic\";\nimport Loading from \"./Loading\";\nimport ContractCall from \"./ContractCall\";\nimport SendTransaction from './SendTransaction';\nimport Info from \"./Info\";\nimport { abi } from '../contract/abi.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Home() {\n  _s();\n\n  const [magic, setMagic] = useState(magicEthereum);\n  const web3 = magic.network === \"ethereum\" ? ethWeb3 : maticWeb3;\n  const [userMetadata, setUserMetadata] = useState();\n  const [balance, setBalance] = useState('...');\n  const network = magic.network === \"ethereum\" ? 'ethereum' : 'matic';\n  const ropstenContractAddress = '0x3EA3913A352cDd49889c7b0dEc8Dd9491d063453';\n  const maticContractAddress = '0xfD827cC6d5b959287D7e1680dBA587ffE5dFcbB4';\n  const contract = new web3.eth.Contract(abi, network === \"ethereum\" ? ropstenContractAddress : maticContractAddress);\n  const [message, setMessage] = useState('...');\n  const history = useHistory();\n  useEffect(() => {\n    // On mount, we check if a user is logged in.\n    // If so, we'll retrieve the authenticated user's profile, balance and contract message.\n    magic.user.isLoggedIn().then(magicIsLoggedIn => {\n      if (magicIsLoggedIn) {\n        magic.user.getMetadata().then(user => {\n          setUserMetadata(user);\n          fetchBalance(user.publicAddress);\n          fetchContractMessage();\n        });\n      } else {\n        // If no user is logged in, redirect to `/login`\n        history.push(\"/login\");\n      }\n    });\n  }, [magic]);\n\n  const handleChangeNetwork = e => {\n    e.target.value === 'ethereum' ? setMagic(magicEthereum) : setMagic(magicMatic);\n    fetchBalance(userMetadata.publicAddress);\n    fetchContractMessage();\n  };\n\n  const fetchBalance = address => {\n    web3.eth.getBalance(address).then(bal => setBalance(web3.utils.fromWei(bal)));\n  };\n\n  const fetchContractMessage = () => contract.methods.message().call().then(setMessage);\n\n  return userMetadata ? /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Info, {\n      handleChangeNetwork: handleChangeNetwork,\n      balance: balance,\n      user: userMetadata,\n      magic: magic\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(SendTransaction, {\n      web3: web3,\n      network: network,\n      publicAddress: userMetadata.publicAddress,\n      fetchBalance: fetchBalance\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ContractCall, {\n      network: network,\n      contract: contract,\n      user: userMetadata,\n      fetchBalance: fetchBalance,\n      message: message,\n      fetchContractMessage: fetchContractMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true) : /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Home, \"HGWLoMLDoicBEPGjvkbqp7/43P4=\", false, function () {\n  return [useHistory];\n});\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/tom/SNTCH-polygon/src/components/Home.js"],"names":["React","useEffect","useState","useHistory","magicEthereum","magicMatic","ethWeb3","maticWeb3","Loading","ContractCall","SendTransaction","Info","abi","Home","magic","setMagic","web3","network","userMetadata","setUserMetadata","balance","setBalance","ropstenContractAddress","maticContractAddress","contract","eth","Contract","message","setMessage","history","user","isLoggedIn","then","magicIsLoggedIn","getMetadata","fetchBalance","publicAddress","fetchContractMessage","push","handleChangeNetwork","e","target","value","address","getBalance","bal","utils","fromWei","methods","call"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { magicEthereum, magicMatic, ethWeb3, maticWeb3 } from \"../magic\";\nimport Loading from \"./Loading\";\nimport ContractCall from \"./ContractCall\";\nimport SendTransaction from './SendTransaction';\nimport Info from \"./Info\";\nimport { abi } from '../contract/abi.js';\n\nexport default function Home() {\n  const [magic, setMagic] = useState(magicEthereum);\n  const web3 = magic.network === \"ethereum\" ? ethWeb3 : maticWeb3;\n  const [userMetadata, setUserMetadata] = useState();\n  const [balance, setBalance] = useState('...');\n  const network = magic.network === \"ethereum\" ? 'ethereum' : 'matic';\n  const ropstenContractAddress = '0x3EA3913A352cDd49889c7b0dEc8Dd9491d063453';\n  const maticContractAddress = '0xfD827cC6d5b959287D7e1680dBA587ffE5dFcbB4';\n  const contract = new web3.eth.Contract(abi, network === \"ethereum\" ? ropstenContractAddress : maticContractAddress);\n  const [message, setMessage] = useState('...');\n  const history = useHistory();\n\n  useEffect(() => {\n    // On mount, we check if a user is logged in.\n    // If so, we'll retrieve the authenticated user's profile, balance and contract message.\n    magic.user.isLoggedIn().then(magicIsLoggedIn => {\n      if (magicIsLoggedIn) {\n        magic.user.getMetadata().then(user => {\n          setUserMetadata(user);\n          fetchBalance(user.publicAddress);\n          fetchContractMessage();\n        });\n      } else {\n        // If no user is logged in, redirect to `/login`\n        history.push(\"/login\");\n      }\n    });\n  }, [magic]);\n\n   const handleChangeNetwork = (e) => {\n    e.target.value === 'ethereum' ? setMagic(magicEthereum) : setMagic(magicMatic);\n    fetchBalance(userMetadata.publicAddress);\n    fetchContractMessage();\n  }\n\n  const fetchBalance = (address) => {\n    web3.eth.getBalance(address).then(bal => setBalance(web3.utils.fromWei(bal)))\n  }\n\n  const fetchContractMessage = () => contract.methods.message().call().then(setMessage)\n\n  return (\n    userMetadata ? (\n      <>\n        <Info handleChangeNetwork={handleChangeNetwork} balance={balance} user={userMetadata} magic={magic} />\n        <SendTransaction web3={web3} network={network} publicAddress={userMetadata.publicAddress} fetchBalance={fetchBalance} />\n        <ContractCall network={network} contract={contract} user={userMetadata} fetchBalance={fetchBalance} message={message} fetchContractMessage={fetchContractMessage} />  \n      </>\n    ) : <Loading />\n  );\n}\n\n"]},"metadata":{},"sourceType":"module"}