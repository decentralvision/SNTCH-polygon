{"ast":null,"code":"import _regeneratorRuntime from\"/Users/tom/SNTCH-polygon/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/tom/SNTCH-polygon/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/tom/SNTCH-polygon/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useRef}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function ContractCall(_ref){var network=_ref.network,user=_ref.user,fetchBalance=_ref.fetchBalance,message=_ref.message,contract=_ref.contract,fetchContractMessage=_ref.fetchContractMessage;var _useState=useState(''),_useState2=_slicedToArray(_useState,2),newMessage=_useState2[0],setNewMessage=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),disabled=_useState4[0],setDisabled=_useState4[1];var _useState5=useState(),_useState6=_slicedToArray(_useState5,2),txnHash=_useState6[0],setTxnHash=_useState6[1];var updateBtnRef=useRef();// Update contract `message` value on the blockchain\nvar updateContractMessage=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var receipt;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(newMessage){_context.next=2;break;}return _context.abrupt(\"return\");case 2:disableForm();_context.next=5;return contract.methods.update(newMessage).send({from:user.publicAddress});case 5:receipt=_context.sent;setTxnHash(receipt.transactionHash);enableForm();case 8:case\"end\":return _context.stop();}}},_callee);}));return function updateContractMessage(){return _ref2.apply(this,arguments);};}();// Disable input form while the transaction is being confirmed\nvar disableForm=function disableForm(){setTxnHash();// Clear link to previous transaction hash\nsetDisabled(true);updateBtnRef.current.innerText='Submitted...';};// Re-enable input form once the transaction is confirmed\nvar enableForm=function enableForm(){setDisabled(false);setNewMessage('');fetchBalance(user.publicAddress);fetchContractMessage();updateBtnRef.current.innerText='Update';};return/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Contract Message\"}),/*#__PURE__*/_jsx(\"div\",{className:\"info\",children:message}),/*#__PURE__*/_jsx(\"h1\",{children:\"Update Message\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",disabled:disabled,value:newMessage,onChange:function onChange(e){return setNewMessage(e.target.value);},className:\"full-width\",placeholder:\"New Message\"}),/*#__PURE__*/_jsx(\"button\",{disabled:disabled,ref:updateBtnRef,onClick:updateContractMessage,children:\"Update\"}),txnHash&&/*#__PURE__*/_jsxs(\"div\",{className:\"info\",children:[/*#__PURE__*/_jsx(\"a\",{href:network===\"ethereum\"?\"https://ropsten.etherscan.io/tx/\".concat(txnHash):\"https://explorer-mumbai.maticvigil.com/tx/\".concat(txnHash),target:\"_blank\",children:\"View Transaction\"}),\" \\u2197\\uFE0F\"]})]});}","map":{"version":3,"sources":["/Users/tom/SNTCH-polygon/src/components/ContractCall.js"],"names":["React","useState","useRef","ContractCall","network","user","fetchBalance","message","contract","fetchContractMessage","newMessage","setNewMessage","disabled","setDisabled","txnHash","setTxnHash","updateBtnRef","updateContractMessage","disableForm","methods","update","send","from","publicAddress","receipt","transactionHash","enableForm","current","innerText","e","target","value"],"mappings":"0aAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,MAA1B,KAAwC,OAAxC,C,wFAEA,cAAe,SAASC,CAAAA,YAAT,MAAgG,IAAxEC,CAAAA,OAAwE,MAAxEA,OAAwE,CAA/DC,IAA+D,MAA/DA,IAA+D,CAAzDC,YAAyD,MAAzDA,YAAyD,CAA3CC,OAA2C,MAA3CA,OAA2C,CAAlCC,QAAkC,MAAlCA,QAAkC,CAAxBC,oBAAwB,MAAxBA,oBAAwB,eACzER,QAAQ,CAAC,EAAD,CADiE,wCACtGS,UADsG,eAC1FC,aAD0F,8BAE7EV,QAAQ,CAAC,KAAD,CAFqE,yCAEtGW,QAFsG,eAE5FC,WAF4F,8BAG/EZ,QAAQ,EAHuE,yCAGtGa,OAHsG,eAG7FC,UAH6F,eAI7G,GAAMC,CAAAA,YAAY,CAAGd,MAAM,EAA3B,CAEA;AACA,GAAMe,CAAAA,qBAAqB,2FAAG,kJACvBP,UADuB,iEAE5BQ,WAAW,GAFiB,sBAGNV,CAAAA,QAAQ,CAACW,OAAT,CAAiBC,MAAjB,CAAwBV,UAAxB,EAAoCW,IAApC,CAAyC,CAAEC,IAAI,CAAEjB,IAAI,CAACkB,aAAb,CAAzC,CAHM,QAGtBC,OAHsB,eAI5BT,UAAU,CAACS,OAAO,CAACC,eAAT,CAAV,CACAC,UAAU,GALkB,sDAAH,kBAArBT,CAAAA,qBAAqB,2CAA3B,CAQA;AACA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,EAAM,CACxBH,UAAU,GAAI;AACdF,WAAW,CAAC,IAAD,CAAX,CACAG,YAAY,CAACW,OAAb,CAAqBC,SAArB,CAAiC,cAAjC,CACD,CAJD,CAMA;AACA,GAAMF,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,EAAM,CACvBb,WAAW,CAAC,KAAD,CAAX,CACAF,aAAa,CAAC,EAAD,CAAb,CACAL,YAAY,CAACD,IAAI,CAACkB,aAAN,CAAZ,CACAd,oBAAoB,GACpBO,YAAY,CAACW,OAAb,CAAqBC,SAArB,CAAiC,QAAjC,CACD,CAND,CASA,mBACE,aAAK,SAAS,CAAC,WAAf,wBACM,wCADN,cAEM,YAAK,SAAS,CAAC,MAAf,UAAuBrB,OAAvB,EAFN,cAIM,sCAJN,cAKM,cAAO,IAAI,CAAC,MAAZ,CAAmB,QAAQ,CAAEK,QAA7B,CAAuC,KAAK,CAAEF,UAA9C,CAA0D,QAAQ,CAAE,kBAACmB,CAAD,QAAOlB,CAAAA,aAAa,CAACkB,CAAC,CAACC,MAAF,CAASC,KAAV,CAApB,EAApE,CAA0G,SAAS,CAAC,YAApH,CAAiI,WAAW,CAAC,aAA7I,EALN,cAMM,eAAQ,QAAQ,CAAEnB,QAAlB,CAA4B,GAAG,CAAEI,YAAjC,CAA+C,OAAO,CAAEC,qBAAxD,oBANN,CAQMH,OAAO,eACL,aAAK,SAAS,CAAC,MAAf,wBACE,UAAG,IAAI,CAAEV,OAAO,GAAK,UAAZ,2CAA4DU,OAA5D,sDAAqHA,OAArH,CAAT,CAAyI,MAAM,CAAC,QAAhJ,8BADF,mBATR,GADF,CAkBD","sourcesContent":["import React, { useState, useRef } from \"react\";\n\nexport default function ContractCall({ network, user, fetchBalance, message, contract, fetchContractMessage }) {\n  const [newMessage, setNewMessage] = useState('');\n  const [disabled, setDisabled] = useState(false);\n  const [txnHash, setTxnHash] = useState();\n  const updateBtnRef = useRef();\n\n  // Update contract `message` value on the blockchain\n  const updateContractMessage = async () => {\n    if (!newMessage) return;\n    disableForm();\n    const receipt = await contract.methods.update(newMessage).send({ from: user.publicAddress });\n    setTxnHash(receipt.transactionHash);\n    enableForm();\n  }\n\n  // Disable input form while the transaction is being confirmed\n  const disableForm = () => {\n    setTxnHash(); // Clear link to previous transaction hash\n    setDisabled(true);\n    updateBtnRef.current.innerText = 'Submitted...';\n  }\n\n  // Re-enable input form once the transaction is confirmed\n  const enableForm = () => {\n    setDisabled(false);\n    setNewMessage('');\n    fetchBalance(user.publicAddress);\n    fetchContractMessage()\n    updateBtnRef.current.innerText = 'Update';\n  }\n\n\n  return (\n    <div className=\"container\">\n          <h1>Contract Message</h1>\n          <div className=\"info\">{message}</div>\n\n          <h1>Update Message</h1>\n          <input type=\"text\" disabled={disabled} value={newMessage} onChange={(e) => setNewMessage(e.target.value)} className=\"full-width\" placeholder=\"New Message\" />\n          <button disabled={disabled} ref={updateBtnRef} onClick={updateContractMessage}>Update</button>\n          {\n          txnHash &&\n            <div className=\"info\">\n              <a href={network === \"ethereum\" ? `https://ropsten.etherscan.io/tx/${txnHash}` : `https://explorer-mumbai.maticvigil.com/tx/${txnHash}`} target=\"_blank\">\n                View Transaction\n              </a> ↗️\n            </div>\n          }\n        </div>\n  )\n}"]},"metadata":{},"sourceType":"module"}