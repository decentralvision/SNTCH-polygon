"use strict";

const detectFramework = require('../frameworks/detectFramework');

const {
  installDependencies
} = require('./packageManager');

const addIgnore = require('./addIgnore');

const get = require('lodash/get');

const resolveInPackage = require('./resolveInPackage');

const logo = require('./logo');

const isPackageInstalled = require('../frameworks/isPackageInstalled');

const {
  isMonorepo,
  getAppsToInit
} = require('./monorepo');

const {
  cyan,
  bold
} = require('chalk');

module.exports = async function init({
  context,
  version,
  skipLayer0Deps,
  connector
}) {
  const {
    logger
  } = context;
  console.clear();
  let appPaths = [process.cwd()];
  logger.title(`ðŸš€ Adding ${logo} to your app...\n`);

  if (isMonorepo()) {
    logger.info(`It looks like you're using a ${cyan(bold('monorepo'))}.\n`);
    appPaths = (await getAppsToInit()) || appPaths;
  }

  for await (const appPath of appPaths) {
    const name = appPath.split('/').slice(-1);
    logger.info(`\nInitializing: ${cyan(bold(name))}\n`);
    process.chdir(appPath);
    await initialize(logger, version, skipLayer0Deps, connector);
  }

  logger.title(`\nTo run your app locally:\n`);
  console.log(cyan('    layer0 dev'));
  logger.title(`\nTo deploy your app:\n`);
  console.log(cyan('    layer0 deploy\n'));
};

const initialize = async (logger, version, skipLayer0Deps, connector) => {
  if (connector) {
    connector = {
      builder: connector
    };
  } else {
    connector = await detectFramework();
  } // add @layer0/* as built time dependencies


  const devDependencies = {
    '@layer0/core': version,
    '@layer0/cli': version,
    '@layer0/prefetch': version,
    '@layer0/devtools': version
  };
  const dependencies = {};

  if (connector) {
    logger.info(`Found framework ${cyan(bold(connector.name))}.`);

    const addLib = (lib, depArray) => {
      depArray[lib] = lib.startsWith('@layer0/') ? version : 'latest';
    }; // add runtime dependencies


    if (connector.dependencies) {
      connector.dependencies.forEach(lib => addLib(lib, dependencies));
      await installDependencies(dependencies);
    }

    if (connector.devDependencies) {
      connector.devDependencies.forEach(lib => addLib(lib, devDependencies));
    } // install the connector if it's not already installed or a path to a local directory


    if (!connector.builder.startsWith('./') && !isPackageInstalled(connector.builder)) {
      devDependencies[connector.builder] = version;
    }
  }

  await installDependencies(devDependencies, {
    dev: true,
    skipLayer0Deps
  });
  addIgnore();

  let initScript = require(resolveInPackage(get(connector, 'builder', '@layer0/core'), `init`)); // use default export if provided, otherwise use module.exports


  if (initScript.default) {
    initScript = initScript.default;
  }

  await initScript();
};