"use strict";

const {
  AuthenticationError
} = require('./errors');

const {
  getApiKey,
  saveApiKey
} = require('./config');

const Api = require('./api');

const Logger = require('./logger');

class Context {
  constructor(argv) {
    let {
      apiUrl,
      token,
      verbose,
      nonInteractive
    } = argv;
    token = token || process.env.LAYER0_DEPLOY_TOKEN;
    this.verbose = verbose;
    this.nonInteractive = nonInteractive || !!token;
    this.apiUrl = apiUrl;
    this.apiKey = token || getApiKey(apiUrl);
    this.apiKeyOverride = !!token; // Will contain the name of authenticated user

    this.currentActor = null;
    this.api = new Api(this);
    this.logger = new Logger(this);
    this.isLocalDev = !/app\.layer0(-dev)?\.co/.test(apiUrl);
  }

  onLogin(name, apiKey) {
    this.currentActor = {
      name
    };
    this.apiKey = apiKey;
    this.loginAction = null;
    saveApiKey(this.apiUrl, apiKey);
  }

  setLoginAction(action) {
    this.loginAction = action;
  }

  async checkAuthentication() {
    if (!this.apiKey) {
      return;
    }

    try {
      this.currentActor = await this.api.currentActor();
    } catch (e) {
      if (e instanceof AuthenticationError) {
        return;
      }

      throw e;
    }
  }

  logout() {
    this.currentActor = null;
    saveApiKey(this.apiUrl, null);
  }

}

module.exports = Context;