"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * List of header regexes that will be matched against user provided header name.
 * The following headers are not allowed for user to modify in any way.
 *
 * * `x-0-*` headers are generated and maintained by Layer0 platform to store intermediate state during request processing
 * * `host` header should only be manipulated by Layer0 platform as otherwise it messes with reverse proxying
 * * `x-request-id` header is generated by Layer0 platform and used as unique identifier of requests
 * * `content-length` header cannot be manipulated apart from manipulating the body and we don't support that in the edge
 */
const LAYER0_PROHIBITED_HEADER_NAMES = [/^x-0-/i, /^host$/i, /^x-request-id$/i, /^content-length$/i];
/**
 * List of cookie regexes that will be matched against user provided cookie name.
 * The following cookies are not allowed for user to modify in any way.
 *
 * * `layer0_*` cookies are created and maintained by Layer0 platform (e.g. `layer0_buckets` and `layer0_destination`)
 * * `layer0_devtools_*` cookies allow enabling/disabling the devtools on a per-user or per-environment basisc
 *    (cf. packages/devtools/src/addBuiltInRoutes.js)
 */
const LAYER0_PROHIBITED_COOKIE_NAMES = [/^layer0_/i];
const LAYER0_WHITELISTED_COOKIE_NAMES = [/^layer0_devtools/i];
/**
 * Validate that prohibited header names are not overrideable by the user
 * @param name
 */
const validateProhibitedHeaderNames = (name) => {
    if (LAYER0_PROHIBITED_HEADER_NAMES.find(prohibitedRegex => name.match(prohibitedRegex))) {
        throw new Error(`Header "${name}" is reserved and cannot be modified`);
    }
};
/**
 * Validate that prohibited cookie names are not overrideable by the user
 * @param name
 */
const validateProhibitedCookieNames = (name) => {
    if (LAYER0_PROHIBITED_COOKIE_NAMES.find(prohibitedRegex => name.match(prohibitedRegex)) &&
        !LAYER0_WHITELISTED_COOKIE_NAMES.find(whitelistRegexp => name.match(whitelistRegexp))) {
        throw new Error(`Cookie "${name}" is reserved and cannot be modified`);
    }
};
/**
 * Validate Set response header
 * @param name header name
 * @param value header value
 */
exports.validateSetResponseHeader = (name /* value */) => {
    validateProhibitedHeaderNames(name);
};
/**
 * Validate Update response header
 * @param name header name
 * @param match match pattern
 * @param replace replace value
 */
exports.validateUpdateResponseHeader = (name /* match, replace */) => {
    validateProhibitedHeaderNames(name);
};
/**
 * Validate Remove response header
 * @param name
 */
exports.validateRemoveResponseHeader = (name) => {
    validateProhibitedHeaderNames(name);
};
/**
 * Validate set request header
 * @param name header name
 * @param value header value
 */
exports.validateSetRequestHeader = (name) => {
    validateProhibitedHeaderNames(name);
};
/**
 * Validate Update request header
 * @param name header name
 * @param match match pattern
 * @param replace replace value
 */
exports.validateUpdateRequestHeader = (name) => {
    validateProhibitedHeaderNames(name);
};
/**
 * Validate Remove request header
 * @param name
 */
exports.validateRemoveRequestHeader = (name) => {
    validateProhibitedHeaderNames(name);
};
/**
 * Validate cookie name.
 * @param name
 */
exports.validateCookieName = (name) => {
    validateProhibitedCookieNames(name);
};
