"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const esbuild_1 = require("esbuild");
const fs_1 = require("../utils/fs");
const path_1 = require("path");
const config_1 = __importDefault(require("../config"));
const logo_1 = __importDefault(require("../utils/logo"));
const paths_1 = require("./paths");
/**
 * Builds the user's routes and layer0.config files.
 * @param
 */
async function bundle(options = {}) {
    // Use process.stdout.write to be able to concatenate `done.` to the same output line.
    process.stdout.write(`> Bundling ${logo_1.default} router... `);
    const destDir = path_1.join(process.cwd(), paths_1.JS_DIR);
    const routerPath = path_1.join(process.cwd(), config_1.default.get('routes'));
    const cwd = process.cwd();
    const esBuildDefaults = {
        bundle: true,
        minify: true,
        platform: 'node',
        target: 'node14.0',
        sourcemap: true,
        // Always exclude fsevents as it cannot be bundled - it's binary.
        external: ['fsevents'],
    };
    const configPath = [path_1.join(cwd, 'layer0.config.js'), path_1.join(cwd, 'layer0.config.cjs')].find(fs_1.existsSync);
    if (!configPath) {
        throw new Error('layer0.config.js not found. Run "layer0 init" to create this file.');
    }
    await Promise.all([
        esbuild_1.build({
            ...esBuildDefaults,
            ...options,
            entryPoints: [routerPath],
            outfile: path_1.join(destDir, 'routes.js'),
        }),
        esbuild_1.build({
            ...esBuildDefaults,
            ...options,
            entryPoints: [configPath],
            outfile: path_1.join(destDir, 'layer0.config.js'),
        }),
    ]);
    process.stdout.write('done.\n');
}
exports.default = bundle;
